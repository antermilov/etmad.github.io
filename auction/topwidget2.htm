<!doctype html>

<html>
<link href="https://fonts.googleapis.com/css?family=Nunito:700" rel="stylesheet">
<script src="https://kimmobrunfeldt.github.io/progressbar.js/bundle.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
<script src="http://aishek.github.io/jquery-animateNumber/javascripts/jquery.color.js"></script>
<script>
	/** @preserve jQuery animateNumber plugin v0.0.14
 * (c) 2013, Alexandr Borisov.
 * https://github.com/aishek/jquery-animateNumber
 */

// ['...'] notation using to avoid names minification by Google Closure Compiler
(function($) {
  var reverse = function(value) {
    return value.split('').reverse().join('');
  };

  var defaults = {
    numberStep: function(now, tween) {
      var floored_number = Math.floor(now),
          target = $(tween.elem);

      target.text(floored_number);
    }
  };

  var handle = function( tween ) {
    var elem = tween.elem;
    if ( elem.nodeType && elem.parentNode ) {
      var handler = elem._animateNumberSetter;
      if (!handler) {
        handler = defaults.numberStep;
      }
      handler(tween.now, tween);
    }
  };

  if (!$.Tween || !$.Tween.propHooks) {
    $.fx.step.number = handle;
  } else {
    $.Tween.propHooks.number = {
      set: handle
    };
  }

  var extract_number_parts = function(separated_number, group_length) {
    var numbers = separated_number.split('').reverse(),
        number_parts = [],
        current_number_part,
        current_index,
        q;

    for(var i = 0, l = Math.ceil(separated_number.length / group_length); i < l; i++) {
      current_number_part = '';
      for(q = 0; q < group_length; q++) {
        current_index = i * group_length + q;
        if (current_index === separated_number.length) {
          break;
        }

        current_number_part = current_number_part + numbers[current_index];
      }
      number_parts.push(current_number_part);
    }

    return number_parts;
  };

  var remove_precending_zeros = function(number_parts) {
    var last_index = number_parts.length - 1,
        last = reverse(number_parts[last_index]);

    number_parts[last_index] = reverse(parseInt(last, 10).toString());
    return number_parts;
  };

  $.animateNumber = {
    numberStepFactories: {
      /**
       * Creates numberStep handler, which appends string to floored animated number on each step.
       *
       * @example
       * // will animate to 100 with "1 %", "2 %", "3 %", ...
       * $('#someid').animateNumber({
       *   number: 100,
       *   numberStep: $.animateNumber.numberStepFactories.append(' %')
       * });
       *
       * @params {String} suffix string to append to animated number
       * @returns {Function} numberStep-compatible function for use in animateNumber's parameters
       */
      append: function(suffix) {
        return function(now, tween) {
          var floored_number = Math.floor(now),
              target = $(tween.elem);

          target.prop('number', now).text(floored_number + suffix);
        };
      },

      /**
       * Creates numberStep handler, which format floored numbers by separating them to groups.
       *
       * @example
       * // will animate with 1 ... 217,980 ... 95,217,980 ... 7,095,217,980
       * $('#world-population').animateNumber({
       *    number: 7095217980,
       *    numberStep: $.animateNumber.numberStepFactories.separator(',')
       * });
       * @example
       * // will animate with 1% ... 217,980% ... 95,217,980% ... 7,095,217,980%
       * $('#salesIncrease').animateNumber({
       *   number: 7095217980,
       *   numberStep: $.animateNumber.numberStepFactories.separator(',', 3, '%')
       * });
       *
       * @params {String} [separator=' '] string to separate number groups
       * @params {String} [group_length=3] number group length
       * @params {String} [suffix=''] suffix to append to number
       * @returns {Function} numberStep-compatible function for use in animateNumber's parameters
       */
      separator: function(separator, group_length, suffix) {
        separator = separator || ' ';
        group_length = group_length || 3;
        suffix = suffix || '';

        return function(now, tween) {
          var negative = now < 0,
              floored_number = Math.floor((negative ? -1 : 1) * now),
              separated_number = floored_number.toString(),
              target = $(tween.elem);

          if (separated_number.length > group_length) {
            var number_parts = extract_number_parts(separated_number, group_length);

            separated_number = remove_precending_zeros(number_parts).join(separator);
            separated_number = reverse(separated_number);
          }

          target.prop('number', now).text((negative ? '-' : '') + separated_number + suffix);
        };
      }
    }
  };

  $.fn.animateNumber = function() {
    var options = arguments[0],
        settings = $.extend({}, defaults, options),

        target = $(this),
        args = [settings];

    for(var i = 1, l = arguments.length; i < l; i++) {
      args.push(arguments[i]);
    }

    // needs of custom step function usage
    if (options.numberStep) {
      // assigns custom step functions
      var items = this.each(function(){
        this._animateNumberSetter = options.numberStep;
      });

      // cleanup of custom step functions after animation
      var generic_complete = settings.complete;
      settings.complete = function() {
        items.each(function(){
          delete this._animateNumberSetter;
        });

        if ( generic_complete ) {
          generic_complete.apply(this, arguments);
        }
      };
    }

    return target.animate.apply(target, args);
  };

}(jQuery));

</script>
	
  <head>
    
    

  </head>


  
  <style>
  div{
  font-family:'Nunito', sans-serif;font-size:24px;font-style:normal;font-variant:normal;font-weight:bold;
  }
  
  .container{
  position:absolute; box-shadow: 5px 5px 3px grey; width:400px; background-color:#8888ee; height:40px;
  }
  
  .left{
  margin-left:15px;
  width: 45%;
  height: 100%;
  vertical-align: middle;
  text-align:left;
  background-color:transparent;
  }
  
  .right{
  right:15px;
  width: 45%;
  vertical-align: middle;
  text-align: right;
  vertical-align: middle;
  background-color:transparent;
  }
  
  span {
    position: absolute;
    top: 50%;
    transform: translate(0, -50%);
  }
  
  @keyframes blink{
    from {opacity: 0;} 
    to {opacity: 1; } 
  }
  
  @keyframes disappear{
    from {opacity: 1;} 
    to {opacity: 0; } 
  }

  </style>
  
    
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    
<script type="text/javascript">

var names = [];
var vals  = [];
var pos = [];

var url = "https://spreadsheets.google.com/tq?key=1xsOHW4UrgdUorqwspuUMcOQwMWDPdplmCB88O7YMmnc&tqx=out:csv";

function update(){
	
	console.log("update started @ "+(new Date()));

	$.get(url, function( data ) {
		var lines = data.split("\n");
		console.log(lines);
		var cnt = parseInt(lines[0].split("\",\"")[2]);
		if(cnt === 0){
			makeDisappear();
			setTimeout(clearUp, 2500);
			names = [];
			vals = [];
			pos = [];
		}
		else{
		console.log(cnt);
			var nvals = [];
			var nnames = [];
			var prevpos = [];
			var newpos = [];
			var prevvals = [];
			ppc = 12345;
			for(var i=0;i<cnt;i++){
				var varr = lines[i].split("\",\"");
				var name = varr[0].slice(1);
				var val = varr[1];
				//four ways:
				//1. we never encountered that name before - creating italic
				//2. we found it and have new place X
				//										2a. larger than was
				//										2b. same as was
				//										2c. smaller than was
				nnames[i] = name;
				nvals[i] = val;
				prevpos[i] = ppc;
				ppc = ppc + 1;
				newpos[i] = 0;
				for(var j=0;j<cnt;j++)
					if(name === names[j]){
						prevpos[i] = pos[j];
						prevvals[i] = vals[j];
					}
			}
			
			for(var i=0;i<cnt;i++){
				for(var j=0;j<cnt;j++)
				if((parseInt(nvals[j])>parseInt(nvals[i]))||((parseInt(nvals[j])==parseInt(nvals[i]))&&(prevpos[j]<prevpos[i])))
					newpos[i]++;
			}
			
			for(var i=0;i<cnt;i++){
				console.log("item: "+names[i]+" position was "+prevpos[i]+" going to "+newpos[i]);
			}
			
			//var labels = document.getElementsByClassName("container");
			
			for(var i=0;i<cnt;i++){
				if(prevpos[i] >= 12345){
					var newel = document.createElement("div");
					newel.setAttribute("class","container");
					//newel.setAttribute("pos",newpos[i]);
					newel.setAttribute("id", nnames[i]);
					//count++;
					newel.setAttribute("style", "top:"+(50*newpos[i])+"px; animation: blink 2s;");
					//newel.setAttribute("value", nvals[i]);
					newel.innerHTML = "<div class='left'><span>"+nnames[i]+"</span></div> <div class='right'><span style='right:15px;'>"+nvals[i]+"</span></div>";
					document.body.appendChild(newel);
					//setTimeout(goSmooth, 900, $(newel), nvals[i]);
				}
				else{
					var modify = document.getElementById(nnames[i]);
					//modify.innerHTML = "<div class='left'><span>"+nnames[i]+"</span></div> <div class='right'><span style='right:15px;'>"+nvals[i]+"</span></div>";
					var ue = $(modify).first().next();
					ue.prop('number', prevvals[i]).animateNumber({ number: nvals[i] });
					
					if (prevpos[i] < newpos[i]){	
						$(modify).animate({top : "+="+((newpos[i]-prevpos[i])*50)+"px", backgroundColor : "#e8888e"}, 2000);
					}
					else if(prevpos[i] > newpos[i]){
						$(modify).animate({top : "-="+((prevpos[i]-newpos[i])*50)+"px", backgroundColor : "#88e88e"}, 2000);	
					}
				}
			}
			
			setTimeout(colorBack(), 2500);
			
			//update names vals pos
			for(var i=0;i<cnt;i++){
				names[i] = nnames[i];
				vals[i] = nvals[i];
				pos[i] = newpos[i];
			}
			
		}	
			
		setTimeout(update, 5000);	
		
	});
	

}

  function goSmooth(x, govalue){
	  x.first().next().prop('number', 0).animateNumber({ number: govalue },4000);
  }
	
  function colorBack(){
	var all = document.getElementsByClassName("container");
		for(var i=0;i<all.length;i++)
			$(all[i]).animate({backgroundColor : "#8888ee"}, 2000);	
  }

  function makeDisappear(){
	var all = document.getElementsByClassName("container");
		for(var i=0;i<all.length;i++)
			$(all[i]).fadeTo(2000, 0);
  }
  
  function clearUp(){
	var all = document.getElementsByClassName("container");
		for(var i=0;i<all.length;i++)
			all[i].outerHTML = "";
  }
  

setTimeout(update, 2500); 
  
  
</script>
<body>



</body>
</html>
